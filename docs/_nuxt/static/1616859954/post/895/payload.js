__NUXT_JSONP__("/post/895", {data:[{article:"\u003C!--markdown--\u003E![2020-07-17T08:19:34.png][1]\n\n\u003Ch2 id=\"引言\"\u003E引言\u003C\u002Fh2\u003E\n\u003Cp\u003E干前端工作，大致离不开三大任务：切图，对接口，写页面逻辑。说到对接口，那肯定是离不开网络请求API的封装的。我将网络请求的封装模式大致分为三个派系：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E无拘无束派 （只封装请求根地址，想咋请求就咋请求，最强的封装就是不封装）\u003C\u002Fli\u003E\n\u003Cli\u003E拦截请求派 （使用一个拦截器配置请求行为和一些错误的拦截处理）\u003C\u002Fli\u003E\n\u003Cli\u003E接口集成派（使用一个或多个文件，统一管理所有请求，约定不允许使用文件中未定义的接口）。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E我属于第三个派系，首先介绍一下各派的风格\u003C\u002Fp\u003E\n\u003Ch2 id=\"各派风格\"\u003E各派风格\u003C\u002Fh2\u003E\n\u003Cp\u003E无拘无束派在快速成型方面略有优势，自由度也相对较高，但是维护起来并不容易，遇到接口改版的时候一部小心就会遗漏。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Ftimgsa.baidu.com\u002Ftimg?image&quality=80&size=b9999_10000&sec=1594979834976&di=28e83b987d0093019b168e1b3cfe69e5&imgtype=0&src=http%3A%2F%2Fpic.yupoo.com%2Fniuguozhu_v%2FGpjU9ut9%2FTtozu.jpg\" alt=\"img\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E拦截请求派属于较优雅的一个派系，没有太多多余的内容，剩下的内容都是为解决问题而生。一般使用一个第三方请求库（如axios，flyio等）完成封装。大致像是这样\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Eimport { FlyError, FlyResponse } from &quot;flyio&quot;;\nconst Fly = require(&quot;flyio\u002Fdist\u002Fnpm\u002Fwx&quot;);\nlet fly = new Fly();\n\u002F\u002F 配置请求根地址\nfly.config.baseURL = process.env.VUE_APP_BASE_URL;\n\u002F\u002F 配置响应拦截器\nfly.interceptors.response.use(\n   \u002F\u002F 如果请求成功,即请求状态码2xx\n  (response: FlyResponse) =&gt; {\n    \u002F\u002F 并且操作成功\n    if (response.data.success) {\n       \u002F\u002F 返回响应数据体\n      return Promise.resolve(response.data);\n    } else {\n    \u002F\u002F 请求成功，但是操作失败，提示后端返回的msg，并抛出错误\n      uni.showToast({\n        icon: &quot;none&quot;,\n        title: response.data.msg,\n      });\n      return Promise.reject(response.data);\n    }\n  },\n  \u002F\u002F 如果请求失败，即状态非2xx\n  (err: FlyError) =&gt; {\n    console.error(err);\n    \u002F\u002F 状态码为401，即跳转登录\n    if (err.status === 401) {\n      uni.reLaunch({\n        url: &quot;\u002Fpages\u002Flogin&quot;,\n      });\n      return;\n    }\n    \u002F\u002F 其他错误状态码，就先弹个框吧\n    uni.showModal({\n      title: err!.request!.url + &quot;接口状态&quot; + err.status,\n      content: &quot;错误原因:&quot; + err.engine.response.msg,\n    });\n    return Promise.reject(err);\n  }\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后使用的时候就直接采用第三方的请求，如\u003Ccode\u003Efly.get()\u003C\u002Fcode\u003E,\u003Ccode\u003Efly.post\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E现在来介绍我所属的派系，我比上面更极端一点，除了封装请求拦截器暴露POST，GET外，还将所有的接口集中到一个API文件（太多了就按类型拆分，如user，shop，setting）\u003C\u002Fp\u003E\n\u003Ch2 id=\"我的实现\"\u003E我的实现\u003C\u002Fh2\u003E\n\u003Cp\u003E基本请求文件http.ts，已引入上文提及的拦截器\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Efunction GET(url: string, params = {}): Promise&lt;ApiResponse&gt; {\n  let config = {\n    headers: {\n      Authorization: store.state.token,\n    }\n  };\n  return fly.get(url, params, config);\n}\nfunction POST(url: string, params = {}): Promise&lt;ApiResponse&gt; {\n  let config = {\n    headers: {\n      Authorization: store.state.token,\n    }\n  };\n  return fly.post(url, params, config);\n}\nexport { GET, POST };\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eapi.ts，负责集成Api\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Eimport { GET, POST } from &quot;.\u002Fhttp&quot;;\nexport default class Api {\n  \u002F**\n   * 登录接口\n   * @param params phone,password\n   *\u002F\n  login(params: object) {\n    return POST(&quot;\u002Fuser\u002Flogin&quot;, params);\n  }\n  \u002F**\n   * 获取账户下所有店铺\n   *\u002F\n  getShop() {\n    return POST(&quot;\u002Fshop\u002FgetShopListByUserId&quot;);\n  }\n  \u002F**\n   * 获取首页数据总览\n   * @param params {shopId}\n   *\u002F\n  getOverview(params: {}) {\n    return POST(&quot;\u002Fuser\u002Fhomepage\u002Fstatistics&quot;, params);\n  }\n  \u002F**\n   * 根据店铺Id获取二级分类\n   * @param params {shopId}\n   *\u002F\n  getCommodityType(params: {}) {\n    return POST(&quot;\u002Fcnccommodity\u002Fcommodity_type\u002Fby_shop&quot;, params);\n  }\n  \u002F**\n   * 分页获取商品列表\n   *\u002F\n  getCommodityList(params: {}) {\n    return POST(&quot;\u002Fcnccommodity\u002Fcommodity_by_page&quot;, params);\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后将Api文件，挂载到Vue的原型链。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Eimport API from &quot;.\u002Fplugins\u002Ffly\u002Fapi&quot;;\nVue.prototype.$api = new API();\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在组件中使用\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E this.$api.login(this.loginForm).then((res) =&gt; {\n console.log(res)\n })\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E这样高度封装的好处是，任何一个接口要改内容，或者自定义功能，都可以只维护Api文件就行了。假设有一需求，要在获取商品之后提示用户”恭喜发财“，而这个接口又在多个页面中使用，我可以只做如下修改即可。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E \u002F**\n   * 分页获取商品列表\n   *\u002F\n  getCommodityList(params: {}) {\n    showToast(&quot;恭喜发财&quot;)\n    return POST(&quot;\u002Fcnccommodity\u002Fcommodity_by_page&quot;, params);\n  }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E这是一个荒诞的需求，但是如果需求是部分请求超过1s就显示加载中呢？或者部分接口需要显示后端返回的msg呢？我可以这样做。\u003C\u002Fp\u003E\n\u003Cp\u003Eapi.ts\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003EupdatePw(params: object) {\n    return Post(&quot;\u002Fadminmanage\u002FupdatePassWard&quot;, params, true);\n},\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Ehttp.ts\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Eexport async function Post(api: string, params = {}, needToast = false) {\n  let data = await axios.post(api, params);\n  if (data.success &amp;&amp; needToast) {\n    Message.success(data.msg);\n  }\n  return data;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E为了应对频繁更改的需求，我真是煞费苦心。\u003C\u002Fp\u003E\n\u003Ch2 id=\"typescript的加持\"\u003ETypescript的加持\u003C\u002Fh2\u003E\n\u003Cp\u003E上面一直在说接口封装的事情，好像对Typescript只字未提。虽然上面都使用了typescript但是都只是铺垫，真正让代码编写柔润丝滑的是声明文件。\u003C\u002Fp\u003E\n\u003Ch3 id=\"原型api的声明\"\u003E原型Api的声明\u003C\u002Fh3\u003E\n\u003Cp\u003E上面我们已经将api挂载到vue的原型，但是typescript的作用并未完全发挥。typescript有两个强大的作用，1. 减少代码出错率 2. 提高代码书写效率。要启用ts强大的语法提示功能，我们需要先写一个d.t文件。\u003C\u002Fp\u003E\n\u003Cp\u003Evue-property.d.ts\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Eimport Vue from &quot;vue&quot;;\nimport Api from &quot;.\u002Fplugins\u002Ffly\u002Fapi&quot;;\ndeclare module &quot;vue\u002Ftypes\u002Fvue&quot; {\n  interface Vue {\n    $api: Api;\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E该文件的作用就是将Vue原型链上的$api类型设置为Api Class, 接下来我们来一起看看它的效果。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Ftypescript%E6%8E%A8%E5%AF%BCapi.gif\" alt=\"typescript推导api\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EVs code贴心的语法提示，从注释提示到参数。无与伦比的代码护航能力几乎能让你无脑写请求。\u003C\u002Fp\u003E\n\u003Ch3 id=\"响应结构体的声明\"\u003E响应结构体的声明\u003C\u002Fh3\u003E\n\u003Cp\u003E人不能满足现状，光有请求推导可还不够。我们还要让它推导响应结构体。假设项目后端返回的响应结构如下\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-json\"\u003E{\n    &quot;code&quot;: 200,\n    &quot;success&quot;: true,\n    &quot;msg&quot;: &quot;操作成功&quot;,\n    &quot;result&quot;: {\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E我们再创建一个响应的d.ts文件\u003C\u002Fp\u003E\n\u003Cp\u003Eindex.d.ts\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Einterface ApiResponse {\n  \u002F**\n   * code: 响应状态码\n   *\u002F\n  code: number;\n  \u002F**\n   * success: 操作是否成功标准\n   *\u002F\n  success: boolean;\n  \u002F**\n   * msg： 请求的附带信息\n   *\u002F\n  msg: string;\n  \u002F**\n   * result: 请求返回结果\n   *\u002F\n  result: Object | any;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E同时声明接口请求返回为ApiResponse\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-typescript\"\u003Efunction GET(url: string, params = {}): Promise&lt;ApiResponse&gt; {\n  let config = {\n    headers: {\n      Authorization: store.state.token,\n    }\n  };\n  return fly.get(url, params, config);\n}\nfunction POST(url: string, params = {}): Promise&lt;ApiResponse&gt; {\n  let config = {\n    headers: {\n      Authorization: store.state.token,\n    }\n  };\n  return fly.post(url, params, config);\n}\nexport { GET, POST };\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E看看语法提示效果\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Fts%E6%8E%A8%E5%AF%BC%E5%93%8D%E5%BA%94%E4%BD%93.gif\" alt=\"ts推导响应体\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E同时如果有分页，还可以声明分页的结构体。总之，声明文件写得好，效率提高绝对少不了。\u003C\u002Fp\u003E\n\u003Ch2 id=\"后记\"\u003E后记\u003C\u002Fh2\u003E\n\u003Cp\u003Ets给我一种以前写C++的感觉，需要先写声明文件\u003Ccode\u003E.h\u003C\u002Fcode\u003E然后在写\u003Ccode\u003E.cpp\u003C\u002Fcode\u003E，这样做的好处是约束你的代码，让你的代码更规范。不过，缺点就是声明文件有种给自己找事的感觉，不过我依旧强烈建议在前端项目下使用ts。这在后期的维护是绝对有利的，而且也并非所有文件都需要写声明文件，要不要写声明文件，取决于你的实现方式。比如本文中的Api文件就没写声明文件，照样可以类型推导，语法提示。祝我早日实现无脑编码~\u003C\u002Fp\u003E\n"}],fetch:{},mutations:void 0});