__NUXT_JSONP__("/post/849", {data:[{article:"\u003C!--markdown--\u003E## 持续集成\n\n\u003Cp\u003E略\u003C\u002Fp\u003E\n\u003Ch2 id=\"gitlab的持续集成\"\u003EGitlab的持续集成\u003C\u002Fh2\u003E\n\u003Cp\u003E我们可以将整个运行机制，看作一个赏金猎人接任务，执行任务，并完成任务的过程。\u003C\u002Fp\u003E\n\u003Ch3 id=\"gitlab-ci\"\u003EGitLab-CI\u003C\u002Fh3\u003E\n\u003Cp\u003E简单来说，这就是一个任务发布平台。运行在gitlab服务器，监听代码状态变化，并发布对应的任务。\u003C\u002Fp\u003E\n\u003Ch3 id=\"gitlab-runner\"\u003EGitLab-Runner\u003C\u002Fh3\u003E\n\u003Cp\u003E而每个runner就是一位赏金猎人，是任务的执行者。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-05-22T06:04:52.png\" alt=\"2020-05-22T06:04:52.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch3 id=\"gitlab-ciyml\"\u003E.gitlab-ci.yml\u003C\u002Fh3\u003E\n\u003Cp\u003E任务的发布者，规定什么时候触发任务，任务的具体内容。\u003C\u002Fp\u003E\n\u003Ch2 id=\"配置流程\"\u003E配置流程\u003C\u002Fh2\u003E\n\u003Cp\u003E经过前面的解释，整个思路就很清晰了。我们需要做的有三件事。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E编写\u003Ccode\u003E.gitlab-ci.yml\u003C\u002Fcode\u003E文件，设置对应的任务\u003C\u002Fli\u003E\n\u003Cli\u003E部署Runner，激活赏金猎人\u003C\u002Fli\u003E\n\u003Cli\u003E配置ci，邀请赏金猎人加入系统\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3 id=\"部署runner\"\u003E部署Runner\u003C\u002Fh3\u003E\n\u003Cp\u003E这一步需要一个服务器，能run起来赏金猎人。\u003C\u002Fp\u003E\n\u003Ch4 id=\"安装\"\u003E安装\u003C\u002Fh4\u003E\n\u003Cp\u003E请务必安装最新版，不然会出现很多未知的问题\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E下载二进制文件\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003E# Linux x86-64\nsudo curl -L --output \u002Fusr\u002Flocal\u002Fbin\u002Fgitlab-runner https:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-amd64\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch1 id=\"linux-x86\"\u003ELinux x86\u003C\u002Fh1\u003E\n\u003Cp\u003Esudo curl -L --output \u002Fusr\u002Flocal\u002Fbin\u002Fgitlab-runner \u003Ca href=\"https:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-386\"\u003Ehttps:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-386\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch1 id=\"linux-arm\"\u003ELinux arm\u003C\u002Fh1\u003E\n\u003Cp\u003Esudo curl -L --output \u002Fusr\u002Flocal\u002Fbin\u002Fgitlab-runner \u003Ca href=\"https:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-arm\"\u003Ehttps:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-arm\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch1 id=\"linux-arm64\"\u003ELinux arm64\u003C\u002Fh1\u003E\n\u003Cp\u003Esudo curl -L --output \u002Fusr\u002Flocal\u002Fbin\u002Fgitlab-runner \u003Ca href=\"https:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-arm64\"\u003Ehttps:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-linux-arm64\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\n2. 授予执行权限\n\n```bash\nsudo chmod +x \u002Fusr\u002Flocal\u002Fbin\u002Fgitlab-runner\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"3\"\u003E\n\u003Cli\u003ECreate a GitLab CI user:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Esudo useradd --comment &#39;GitLab Runner&#39; --create-home gitlab-runner --shell \u002Fbin\u002Fbash\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"4\"\u003E\n\u003Cli\u003EInstall and run as service:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Esudo gitlab-runner install --user=gitlab-runner --working-directory=\u002Fhome\u002Fgitlab-runner\nsudo gitlab-runner start\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4 id=\"加入任务系统\"\u003E加入任务系统\u003C\u002Fh4\u003E\n\u003Cp\u003E注册\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Esudo gitlab-runner register\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E然后就是一些简单的配置，配置完成后就将该Runner注册到任务发布平台了，然后就可以接任务了。详细见参考文献【1】\u003C\u002Fp\u003E\n\u003Ch4 id=\"编写gitlab-ciyml任务\"\u003E编写.gitlab-ci.yml任务\u003C\u002Fh4\u003E\n\u003Cp\u003E本机部署版本\n.gitlab-ci.yml\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-yml\"\u003Estages:\n  - deploy\n\ncache:\n  paths:\n    - node_modules\u002F\n    - public\u002F\n\ndeployJob:\n  stage: deploy \n  script:\n    - npm install \n    - npm run build\n    - rm -rf \u002Fhome\u002Fdata\u002Fthree_miju_shopper_manager_system_front\u002F*\n    - cp -rf .\u002Fdist\u002F* \u002Fhome\u002Fdata\u002Fthree_miju_shopper_manager_system_front\u002F\n    - sh .\u002Fbot.sh ${CI_COMMIT_REF_SLUG} ${CI_COMMIT_SHA:0:8} ${CI_COMMIT_MESSAGE}\n  tags:\n    - shared_test_machine_runner\n  only:\n    - dev\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E这个版本具有企业微信群机器人推送功能，需要配置\u003Ccode\u003E.\u002Fbot.sh\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003E#!\u002Fusr\u002Fbin\u002Fenv bash\ncurl &#39;群机器人地址&#39; \\\n      -H &#39;Content-Type: application\u002Fjson&#39; \\\n      -d &#39;\n      {\n        &quot;msgtype&quot;: &quot;markdown&quot;,\n        &quot;markdown&quot;: {\n          &quot;content&quot;: &quot;商户端代码已更新，分支:&#39;$1&#39; 提交:&#39;$2&#39;\n          更新：&#39;$3&#39;\n          已发布，[点击测试](http:\u002F\u002Ftest.shop.gileey.cn)&quot;\n        }\n      }&#39;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E远程推送版本\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Estages:\n  - deploy\n\ncache:\n  paths:\n    - node_modules\u002F\n    - public\u002F\n\ndeployJob:\n  stage: deploy \n  script:\n    - mkdir -p ~\u002F.ssh\n    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt;&gt; ~\u002F.ssh\u002Fid_dsa\n    - chmod 600 ~\u002F.ssh\u002Fid_dsa\n    - echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~\u002F.ssh\u002Fconfig\n    - rsync -avzu --progress .\u002Fdist\u002F* root@thinkmoon.cn:\u002Fwww\u002Fwwwroot\u002F3ju.psyannabel.cn\u002F\n  tags:\n    - shared_test_machine_runner\n  only:\n    - dev\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E该版本在gitlab-runner机器上执行编译等工作，编译完成后使用rsync同步到云服务器，需要配置私钥变量\u003Ccode\u003E$SSH_PRIVATE_KEY\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-05-30T14:20:12.png\" alt=\"2020-05-30T14:20:12.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"遇到的问题\"\u003E遇到的问题\u003C\u002Fh2\u003E\n\u003Cp\u003E导入自定义组件时一直报错：\u003Ccode\u003EThis dependency was not found:\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E出现背景：由于以前命名组件是&quot;clickImg&quot;,后改成&quot;ClickImg&quot;,由于linux的区分大小写，所以会一直没找到。\u003C\u002Fp\u003E\n\u003Cp\u003E解决方案：换个名字？？？\u003C\u002Fp\u003E\n\u003Ch2 id=\"参考文献\"\u003E参考文献\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fjuejin.im\u002Fpost\u002F5b03963a51882542821ca56a\"\u003E前端的gitlab的ci初尝试\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.gitlab.com\u002Frunner\u002Finstall\u002Flinux-manually.html\"\u003EInstall GitLab Runner manually on GNU\u002FLinux\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n"}],fetch:{},mutations:void 0});