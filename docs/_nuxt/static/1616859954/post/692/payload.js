__NUXT_JSONP__("/post/692", {data:[{article:"\u003C!--markdown--\u003E## 为什么需要？\n\u003Cp\u003E我们在上一篇\u003Ca href=\"https:\u002F\u002Fwww.thinkmoon.cn\u002F20191213\u002Fcid=638.html\"\u003EUbuntu深度学习的相关配置\u003C\u002Fa\u003E中最后讲到，将工作目录下的文件装载到了容器之下，这样我们在主机中编写一个文件，如\u003Ccode\u003Etf.py\u003C\u002Fcode\u003E。在容器中执行，需要输入以下命令。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Edocker exec tf python &#39;.\u002Ftf.py&#39; \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E这样每改一下文件，想要看效果的话，就需要输入以上命令。而且，还不方便调试。然后，我就在想能不能做到像我平常写代码那样，在VScode中，点一下就运行，而且可以调试呢？于是便有了本文。\u003C\u002Fp\u003E\n\u003Ch2 id=\"准备工作\"\u003E准备工作\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E安装好VScode并且保证互联网连接正常。然后将工作目录装载到容器的\u003Ccode\u003E\u002Froot\u002FProject\u003C\u002Fcode\u003E目录下，不然\u003Ccode\u003E\u002Ftmp\u003C\u002Fcode\u003E的文件实在是太乱七八糟了。\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Edocker run --gpus all -itd --name tf --rm -v ~\u002FProject:\u002Froot\u002FProject  tensorflow\u002Ftensorflow:latest-gpu-py3\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"操作流程\"\u003E操作流程\u003C\u002Fh2\u003E\n\u003Cp\u003E首先安装两个插件\u003Ccode\u003Edocker\u003C\u002Fcode\u003E和\u003Ccode\u003ERemote Development\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-21T01:29:10.png\" alt=\"VScode的docker插件\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E上图中可以看到tensorflow的容器已经处于运行中了，然后再打开\u003Ccode\u003ERemote Development\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-21T01:31:51.png\" alt=\"Remote Development\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E显示有一个容器待连接，然后选择它，打开容器中的\u003Ccode\u003EProject\u003C\u002Fcode\u003E文件夹\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-21T01:33:55.png\" alt=\"VScode in Container\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E然后安装Python插件和调试工具，修改tf.py文件\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-python\"\u003Eimport tensorflow as tf\nprint(&quot;hello tensorflow&quot;)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E点击右边的运行图标，成功输出。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-21T01:55:11.png\" alt=\"run tensorflow\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E打开主机文件\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-21T01:55:50.png\" alt=\"docker主机文件同步\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E发现修改也已经同步，Over，现在可以愉快的写代码了。\u003C\u002Fp\u003E\n"}],fetch:{},mutations:void 0});