__NUXT_JSONP__("/post/861", {data:[{article:"\u003C!--markdown--\u003E\u003E 该文章为异教徒解决方案，各位看官看下即可，切勿模仿！！！\n\n\u003Ch2 id=\"问题描述\"\u003E问题描述\u003C\u002Fh2\u003E\n\u003Cp\u003E原生的el-upload只支持上传图片时候的预览和回显，这是因为只针对img标签做了适配，如下图。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-06-03T05:42:34.png\" alt=\"2020-06-03T05:42:34.png\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E而如果我们上传视频，则会出现一个白方框，用户体验不佳。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-06-03T05:45:07.png\" alt=\"2020-06-03T05:45:07.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"解决思路\"\u003E解决思路\u003C\u002Fh2\u003E\n\u003Cp\u003E其实正确的解决思路应该是\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E将\u003Ccode\u003Eshow-file-list\u003C\u002Fcode\u003E属性设置为\u003Ccode\u003Efalse\u003C\u002Fcode\u003E。然后再自己循环显示file-list，以及追加对应的预览，删除按钮及功能。\u003C\u002Fli\u003E\n\u003Cli\u003E设置自定义模板内容(推荐使用)\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E但是我觉得这样太麻烦了(时间问题）。\u003C\u002Fp\u003E\n\u003Cp\u003E于是我突发奇想，如果我将img标签改成video标签呢？如下图\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-06-03T05:46:56.png\" alt=\"2020-06-03T05:46:56.png\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E发现居然完美契合，毫无违和感。\u003C\u002Fp\u003E\n\u003Ch2 id=\"预览的实现\"\u003E预览的实现\u003C\u002Fh2\u003E\n\u003Cp\u003E在做到把img改为video标签之前，还需要解决的另一个问题就是，如何让视频也支持预览。老规矩，我们先来看看官方Demo怎么实现预览的。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-06-03T05:54:03.png\" alt=\"2020-06-03T05:54:03.png\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E官方的做法是增加一个dialog，然后在点击预览图片时将文件url传给dialog。我们先来实现一下改写一下dialog\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-vue\"\u003E&lt;el-dialog :visible.sync=&quot;dialogVisible&quot; :modal-append-to-body=&quot;true&quot;&gt;\n      &lt;video width=&quot;100%&quot; muted autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; v-if=&quot;dialogImageUrl[dialogImageUrl.length - 1] == 4&quot; :src=&quot;dialogImageUrl&quot;&gt;&lt;\u002Fvideo&gt;\n      &lt;img width=&quot;100%&quot; v-else :src=&quot;dialogImageUrl&quot; alt \u002F&gt;\n    &lt;\u002Fel-dialog&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003Etips: 我这种判断MP4格式的方式实属异端，不建议模仿。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"替换img标签\"\u003E替换img标签\u003C\u002Fh2\u003E\n\u003Cp\u003E一到标签节点的操作，我第一想到的就是document操作（异端+1），直接上代码。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E changeVideoTag(){\n      let videoTag = document.querySelector(&#39;.video img&#39;)\n      console.log(&#39;检测到应为video的img标签&#39;, videoTag)\n      if(videoTag){\n        let parentNode = videoTag.parentNode\n        let newElement = document.createElement(&#39;video&#39;)\n        newElement.setAttribute(&#39;class&#39;, videoTag.getAttribute(&#39;class&#39;))\n        newElement.setAttribute(&#39;src&#39;, videoTag.getAttribute(&#39;src&#39;))\n        parentNode.insertBefore(newElement, videoTag)\n      }\n    },\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E该函数负责寻找video类下的img标签，然后在img标签之前，添加一个同样的videos元素节点，此处你可以选择是否移除原img标签。\u003C\u002Fp\u003E\n\u003Ch2 id=\"最终实现效果\"\u003E最终实现效果\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Fgif.gif\" alt=\"gif.gif\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"最后的话\"\u003E最后的话\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E这种方法非常不推荐使用，强烈建议使用自定义模板缩略图\u003C\u002Fli\u003E\n\u003Cli\u003E这种方法非常不推荐使用，强烈建议使用自定义模板缩略图\u003C\u002Fli\u003E\n\u003Cli\u003E这种方法非常不推荐使用，强烈建议使用自定义模板缩略图\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n"}],fetch:{},mutations:void 0});