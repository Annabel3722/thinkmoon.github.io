__NUXT_JSONP__("/post/936", (function(a,b,c){return {data:[{article:{cid:936,title:"vue3.x简单实现wx.showModal()",slug:"936",created:1606749180,modified:1606750253,text:"\u003C!--markdown--\u003E![2020-11-30T13:14:59.png][1]\r\n\r\n## 引言\r\n\r\n开发过微信小程序的同学想必都对wx.showModal不陌生。用起来还是比较方便的，以api的形式挂载在全局对象wx上，只需调用一下这个api即可显示一个弹窗，还可以根据设置的参数做一些定制。一些知名的组件库，也实现了此类功能。比如element的$message。所以，我也来分享一个简单实现方式，以此来加深对Vue的理解。\r\n\r\n## 代码结构\r\n\r\n![2020-11-30T15:17:32.png][2]\r\n\r\n在Message目录下，有着两个文件，vue文件负责组件内容，js负责处理服务APi。\r\n\r\n## 实现原理\r\n\r\n首先使用vue文件创建一个弹窗组件，然后按正常写组件方式写一个组件逻辑。唯一不同的是引入方式不一样，不在别的组件中引用该组件。使用js文件将其注册到全局api，调用该api。\r\n\r\n## 实现过程\r\n\r\n\u003E 注意：本文使用的是Vue3.x版本。由于本人Vue3.x也正出于学习之处，如有理解\u002F实现不当之处，恳请指正！\r\n\r\n### Vue文件\r\n\r\n```html\r\n\u003Ctemplate\u003E\r\n    \u003Cdiv v-if=\"visible\" class=\"tm-message-wrapper\"\u003E\r\n        \u003Cdiv class=\"tm-message-dialog\"\u003E\r\n            \u003Cdiv class=\"tm-message-title\"\u003E{{ title }}\u003C\u002Fdiv\u003E\r\n            \u003Cdiv class=\"tm-message-content\"\u003E{{ content }}\u003C\u002Fdiv\u003E\r\n            \u003Cdiv class=\"tm-message-noRepeat\" v-if=\"showNoRepeat\"\u003E\u003Cinput type=\"checkbox\" v-model=\"noRepeat\"\u003E不再提示\u003C\u002Fdiv\u003E\r\n            \u003Cdiv class=\"tm-message-operation-area\"\u003E\r\n                \u003Cdiv class=\"tm-message-cancel tm-message-operation\" @click=\"action('cancel')\"\u003E取消\u003C\u002Fdiv\u003E\r\n                \u003Cdiv class=\"tm-message-confirm tm-message-operation\" @click=\"action('confirm')\"\u003E确定\u003C\u002Fdiv\u003E\r\n            \u003C\u002Fdiv\u003E\r\n        \u003C\u002Fdiv\u003E\r\n    \u003C\u002Fdiv\u003E\r\n\u003C\u002Ftemplate\u003E\r\n\r\n\u003Cscript\u003E\r\nexport default {\r\n    data() {\r\n        return {\r\n            uid: \"default\",\r\n            visible: false,\r\n            title: \"提示\",\r\n            content: \"消息内容\",\r\n            showNoRepeat: false,\r\n            noRepeat: false,\r\n            callBack: null\r\n        }\r\n    },\r\n    methods: {\r\n        action(action) {\r\n            this.visible = false\r\n            if (action == \"confirm\" && this.showNoRepeat && this.noRepeat) {\r\n                window.localStorage.setItem(this.uid, true)\r\n            }\r\n            if (this.callBack instanceof Function) {\r\n                this.callBack(action)\r\n            }\r\n        }\r\n    }\r\n}\r\n\u003C\u002Fscript\u003E\r\n\r\n```\r\n该文件没有什么特别值得注意的地方，唯一一个跟普通组件写法不一样的就是多了一个callBack回调。\r\n\r\n### js文件\r\n\r\n```javascript\r\nimport { createApp } from 'vue'\r\nimport Message from \".\u002Findex.vue\"\r\n\r\n\r\nconst msg = options =\u003E {\r\n    const NoticeInstance = createApp(Message)\r\n    let msgNode = document.createElement('div');\r\n    NoticeInstance.vm = NoticeInstance.mount(msgNode);\r\n    if (options && Object.keys(options).length \u003E 0) {\r\n        Object.assign(NoticeInstance.vm, options)\r\n    }\r\n    console.log(NoticeInstance)\r\n    NoticeInstance.vm.visible = true;\r\n    NoticeInstance.dom = NoticeInstance.vm.$el;\r\n    document.body.appendChild(NoticeInstance.dom)\r\n    return NoticeInstance.vm\r\n}\r\nexport default msg;\r\n\r\n```\r\n\r\njs文件首先创建了一个app实例，然后将其挂载到一个新的html元素，随后进行一些属性的赋值操作。最后将实例追加之文档的body末尾。\r\n\r\n## 引入\r\n\r\nmain.js\r\n```javascript\r\nimport { createApp } from 'vue'\r\nimport App from '.\u002FApp.vue'\r\n\r\nimport Message from \"..\u002Ftm-ui\u002Fcomponents\u002FMessage\"\r\n\r\nconst app = createApp(App)\r\napp.config.globalProperties.$message = Message;\r\n\r\napp.mount('#app')\r\n\r\n```\r\n\r\n## 调用\r\n\r\ntest.vue\r\n```html\r\n\u003Ctemplate\u003E\r\n  \u003Cdiv @click=\"showModal\" class=\"bg-blue text-lg\"\u003E\r\n      点我弹窗(wx.showModal)\r\n  \u003C\u002Fdiv\u003E\r\n\u003C\u002Ftemplate\u003E\r\n\r\n\u003Cscript\u003E\r\nexport default {\r\n    methods:{\r\n        showModal(){\r\n            this.$message({\r\n                title:\"弹窗标题\",\r\n                content:\"弹窗内容\",\r\n                callBack: (action) =\u003E {\r\n                    if(action == 'confirm') {\r\n                        console.log(\"点击了确定\")\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\u003C\u002Fscript\u003E\r\n\r\n\u003Cstyle\u003E\r\n\r\n\u003C\u002Fstyle\u003E\r\n```\r\n\r\n![2020-11-30T15:18:35.png][3]\r\n\r\n## 后记\r\n\r\n相比于Vue2.x，vue3.x的设计理念更偏向于函数式编程，比如不在默认导出Vue对象，而是使用createApp的方式创建一个实例。而这个showModal的实现虽然达到了效果，但用起来依旧缺少了函数式编程的美感。相比于微信小程序showModal的对象函数回调写法。我个人更偏向于element的messag实现。返回一个Promise对象，确认操作在then()调用里面，取消操作在catch()异常处理。感觉这样会更具有与Vue3统一的编程式美感。\r\n\r\n\r\n  [1]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-11-30T13:14:59.png\r\n  [2]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-11-30T15:17:32.png\r\n  [3]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-11-30T15:18:35.png",order:a,authorId:c,type:"post",status:"publish",commentsNum:a,allowComment:b,allowPing:b,allowFeed:b,parent:a,views:487,likes:c}}],fetch:{},mutations:void 0}}(0,"1",1)));