__NUXT_JSONP__("/post/225", {data:[{article:"\u003Ch2 id=\"为啥需要这个？\"\u003E为啥需要这个？\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E有时候我们写微信小程序，写好了。在手机上运行感觉效果还不错，正想分享给别人。突然发现没有分享选项，纳尼？原来是忘记写\u003Ccode\u003EonShareAppMessage()\u003C\u002Fcode\u003E了。有得加上，再编译。不得不说，麻烦的一匹。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"应运而生\"\u003E应运而生\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E然后我就想，要是可以让默认支持分享就好了。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"wepy实现方法\"\u003Ewepy实现方法\u003C\u002Fh2\u003E\n\u003Ch2 id=\"大致思路\"\u003E大致思路\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode\u003Eimport wepy from &#39;wepy&#39;;\nexport default class Page extends wepy.page {\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E分析代码，发现所有的\u003Ccode\u003Epage\u003C\u002Fcode\u003E都继承于\u003Ccode\u003Ewepy.page\u003C\u002Fcode\u003E, 而\u003Ccode\u003Ewepy.page\u003C\u002Fcode\u003E又继承于\u003Ccode\u003Ewepy.component\u003C\u002Fcode\u003E. 这感情好。也就意味着我只需要构建一个超类继承\u003Ccode\u003Ewepy.page\u003C\u002Fcode\u003E就可以了\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"实践\"\u003E实践\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E新建page.js文件，内容如下\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Eimport wepy from &#39;wepy&#39;;\nexport default class Page extends wepy.page {\n    onShareAppMessage() {\n        \n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E然后再调整一下页面继承\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre\u003E\u003Ccode\u003Eimport Page from &#39;..\u002Fpage&#39;;\nexport default class Index extends Page {\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E编译运行，果然如此！\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"如果要自定义分享内容怎么办？\"\u003E如果要自定义分享内容怎么办？\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E在子page里面重构\u003Ccode\u003EonShareAppMessage\u003C\u002Fcode\u003E就可以啦。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003Etips: 现使用uni-app后发现已经默认支持分享了\u003C\u002Fp\u003E\n\u003Ch2 id=\"后续：-uni-app说这是个bug，已经修复了。。\"\u003E后续： uni-app说这是个BUG，已经修复了。。\u003C\u002Fh2\u003E\n\u003Ch2 id=\"后备方案使用mixin全局混入\"\u003E后备方案——使用mixin全局混入\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E在main.js中添加以下内容。\u003Cpre\u003E\u003Ccode\u003Eimport qs from &#39;query-string&#39;\nVue.mixin({\n onShareAppMessage() {\n     console.log(&#39;分享路径&#39;, &#39;\u002Fpages\u002Findex?route=&#39; + this.$mp.page.route + &#39;&amp;&#39; + qs.stringify(this.$mp.query))\n     return {\n         path: &#39;\u002Fpages\u002Findex?route=&#39; + this.$mp.page.route + &#39;&amp;&#39; + qs.stringify(this.$mp.query)\n     };\n }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n以上代码实现了所有页面都支持转发，并将转发路径设为主页。\u003C\u002Fli\u003E\n\u003Cli\u003E在主页的onLoad函数中加入以下内容\u003Cpre\u003E\u003Ccode\u003Eif (options.route) {\n             uni.navigateTo({\n                 url: &#39;\u002F&#39; + options.route + &#39;?&#39; + qs.stringify(options)\n             })\n         }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n这样就实现了，进入后的页面跳转。\u003C\u002Fli\u003E\n\u003Cli\u003E为什么要这样做？\n因为大家都知道，当我们直接分享小程序页面给别人的时候。别人点击进入非tab页面，是没有返回操作的。增加了上面的功能后，所有页面的分享，都会先进入主页，再跳转至分享的页面。用户就可以无缝对接啦！\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E更新，现小程序已支持页面返回\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n"}],fetch:{},mutations:void 0});