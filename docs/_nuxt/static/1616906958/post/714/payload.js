__NUXT_JSONP__("/post/714", {data:[{article:"\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-01-14T08:20:00.png\" alt=\"【leetcode】2. Add Two Numbers两数相加\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"描述\"\u003E描述\u003C\u002Fh2\u003E\n\u003Cp\u003E给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\u003C\u002Fp\u003E\n\u003Cp\u003E如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\u003C\u002Fp\u003E\n\u003Cp\u003E您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E示例：\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-c\"\u003E输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n输出：7 -&gt; 0 -&gt; 8\n原因：342 + 465 = 807\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"思路\"\u003E思路\u003C\u002Fh2\u003E\n\u003Cp\u003E我看到这个题的第一感觉就是用递归把数获取出来，然后再相加，之后再把得数结构化。问题就被细分为了两个方面：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E加数的提取\u003C\u002Fli\u003E\n\u003Cli\u003E得数的结构化\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2 id=\"我的初次实现\"\u003E我的初次实现\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-python\"\u003Eclass Solution:\n    def getStr(self,node: ListNode) -&gt; str:\n        if node.next == None:\n            return node.val\n        else:\n            last = self.getStr(node.next)\n            return  str(last) + str(node.val)\n\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:\n        num1 = self.getStr(l1)\n        num2 = self.getStr(l2)\n        result = int(num1) + int(num2)\n        resultList = list(str(result))\n        tmp = ListNode(int(resultList.pop(0)))\n        List = tmp\n        while resultList:\n            tmp = ListNode(int(resultList.pop(0)))\n            tmp.next = List\n            List = tmp\n        return List\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3 id=\"成果\"\u003E成果\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-01-14T08:25:07.png\" alt=\"成果\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"改进思路\"\u003E改进思路\u003C\u002Fh2\u003E\n\u003Cp\u003E利用人列竖式算法的方法，计算每一列的值\u003C\u002Fp\u003E\n\u003Ch3 id=\"改进代码\"\u003E改进代码\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-python\"\u003Eclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:\n        # if l1.next == None and l1.val == 0:\n        #    return l2\n        # if l2.next == None and l2.val == 0:\n        #    return l1\n        l1_iter = l1\n        l2_iter = l2\n        Sum = l1_iter.val + l2_iter.val\n        carry = 1 if Sum &gt;= 10 else 0\n        Sum %= 10\n        List = ListNode(Sum)\n        l1_iter = l1_iter.next\n        l2_iter = l2_iter.next\n        Site = List\n        while(l1_iter != None and l2_iter != None):\n            Sum = l1_iter.val + l2_iter.val + carry\n            carry = 1 if Sum &gt;= 10 else 0\n            Sum %= 10\n            tmp = ListNode(Sum)\n            Site.next = tmp\n            Site = Site.next\n            l1_iter = l1_iter.next\n            l2_iter = l2_iter.next\n        last = Site\n        if(l1_iter == None and l2_iter == None) :\n            if(carry == 1):\n                tmp = ListNode(carry)\n                last.next = tmp\n            return List\n        else:\n            Site = l1_iter if l2_iter == None else l2_iter\n            tail = Site\n            while(Site != None and carry == 1):\n                Sum = Site.val + carry\n                Site.val = Sum % 10\n                carry = 0 if Sum &lt; 10 else 1\n                if(Site.next == None and carry == 1):\n                    tmp = ListNode(carry)\n                    Site.next = tmp\n                    break\n                Site = Site.next\n            last.next = tail\n        return List\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"成果-1\"\u003E成果\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-01-14T10:23:51.png\" alt=\"Add Two Numbers超越100%的Python用户\"\u003E\u003C\u002Fp\u003E\n"}],fetch:{},mutations:void 0});