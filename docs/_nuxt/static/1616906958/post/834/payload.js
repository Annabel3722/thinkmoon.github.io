__NUXT_JSONP__("/post/834", {data:[{article:"\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-04-19T02:47:53.png\" alt=\"2020-04-19T02:47:53.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"安装\"\u003E安装\u003C\u002Fh2\u003E\n\u003Cp\u003E全局安装\u003Ccode\u003E@vue\u002Fcli\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Eyarn global add @vue\u002Fcli\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E检查是否安装成功(需重启更新环境变量)\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Evue --version\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-04-19T02:36:37.png\" alt=\"2020-04-19T02:36:37.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"快速原型开发\"\u003E快速原型开发\u003C\u002Fh2\u003E\n\u003Cp\u003E新版本Vue中增加了该功能，方便快速进行单个Vue文件开发，需要先额外安装一个全局的扩展。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Eyarn global add @vue\u002Fcli-service-global\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E入手尝鲜\u003C\u002Fp\u003E\n\u003Ch3 id=\"新建indexvue文件\"\u003E新建index.vue文件\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-html\"\u003E&lt;template&gt;\n    &lt;div&gt;Hello Vue&lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3 id=\"运行服务\"\u003E运行服务\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-shell\"\u003Evue serve index.vue\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3 id=\"效果\"\u003E效果\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cimg src=\"http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-04-19T02:47:22.png\" alt=\"2020-04-19T02:47:22.png\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"创建项目\"\u003E创建项目\u003C\u002Fh2\u003E\n\u003Cp\u003E略\u003C\u002Fp\u003E\n\u003Ch2 id=\"vueconfigjs\"\u003Evue.config.js\u003C\u002Fh2\u003E\n\u003Cp\u003E在vue cli 3.x\u002F4.x 中，使用vue.cofig.js来进行一些包括webpack的配置。比如我们可以想要一个控制台输出编译时间的配置，可以在如下设置\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Econst moment = require(&#39;moment&#39;)\n\nmodule.exports = {\n  chainWebpack: config =&gt; {\n    config\n      .plugin(&#39;html&#39;)\n      .tap(args =&gt; {\n        args[0].title = &#39;三只蜜桔后台管理系统·商户版&#39;,\n        args[0].buildTime = moment().format(&#39;YYYY.MM.DD.HH.mm&#39;)\n        return args\n      })\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E亦或者，我们想要在生产环境禁用console.log\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003Econst moment = require(&#39;moment&#39;)\n\nmodule.exports = {\n  chainWebpack: config =&gt; {\n    config\n      .plugin(&#39;html&#39;)\n      .tap(args =&gt; {\n        args[0].title = &#39;三只蜜桔后台管理系统·商户版&#39;,\n        args[0].buildTime = moment().format(&#39;YYYY.MM.DD.HH.mm&#39;)\n        return args\n      })\n    config.optimization\n      .minimizer(&#39;terser&#39;)\n      .tap(args =&gt; {\n        Object.assign(args[0].terserOptions.compress, {\n          pure_funcs: [&#39;console.log&#39;]\n        })\n        return args\n      })\n  },\n  productionSourceMap: false,\n  configureWebpack: {\n    output: {\n      filename: `${moment().format(&#39;YYYY.MM.DD.HH.mm&#39;)}.${process.env.NODE_ENV}.[name].js`,\n      chunkFilename: `${moment().format(&#39;YYYY.MM.DD.HH.mm&#39;)}.${process.env.NODE_ENV}.[name].js`\n    }\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n"}],fetch:{},mutations:void 0});