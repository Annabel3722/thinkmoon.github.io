__NUXT_JSONP__("/post/145", (function(a,b){return {data:[{article:{cid:145,title:"毕业设计思路篇(五)之交通流量模拟",slug:"145",created:1549881120,modified:1549894304,text:"\u003C!--markdown--\u003E```c++\r\nrunSimulation(Graph &G)\r\n```\r\n\r\n## 1. 遍历每条道路\r\n\r\n## 2. 遍历该道路的车辆\r\n\r\n### a. 计算特定时间间隔后的位置\r\n\r\n### b. 若应行驶至其他道路\r\n\r\n进入对应的路口缓冲区，根据路口类的红绿灯对象判断是否能通行。\r\n\r\n\u003E 若能通行，则填至目标道路\r\n\u003E\r\n\u003E 若不能，则继续停留在路口缓冲区\r\n\r\n### c. 若仍停留在原道路\r\n\r\n改变该车在当前道路的位置。\r\n\r\n```c++\r\n  for (auto &road:G.m_Road_v) {\r\n        auto src = road.m_queVehicle;\r\n        decltype(road.m_queVehicle) obj;\r\n        \u002F\u002F路内车的遍历\r\n        while (!src.empty()) {\r\n            \u002F\u002F弹出一辆车\r\n            auto it = src.front();\r\n            src.pop_front();\r\n            \u002F\u002F 当车的时间戳小于实际时间时，才模拟运行\r\n            if (it.time \u003C SYSTEM_TIME) {\r\n                it.fSpec = (100 - road.get_Congestion() - 20) \u002F 3.6;\r\n                dist = it.dDistance + it.fSpec * 10;\r\n                it.time++;\r\n\r\n                it.showself();\r\n                \u002F\u002F如果车十秒后不在此路\r\n                if (dist \u003E= road.m_dLength) {\r\n                    \u002F\u002F路径擦除\r\n                    auto route = it.queRoute;\r\n                    int site = it.m_nSiteRoadID;\r\n                    route.pop();\r\n                    \u002F\u002F如果抵达终点\r\n                    if (route.empty()) {\r\n                        cout \u003C\u003C \"it is be shutdown\" \u003C\u003C endl;\r\n                        exit(0);\r\n                        \u002F\u002F 否侧没有抵达终点\r\n                    } else {\r\n                        \u002F\u002F获取所在路和下一条路的ID\r\n                        int next = route.front();\r\n                        \u002F\u002F判断红绿灯情况\r\n                        cout \u003C\u003C site \u003C\u003C endl;\r\n                        G.m_CrossRoad_v[site].m_CTrafficLight_Light.clock(SYSTEM_TIME);\r\n                        \u002F\u002F如果可以通行\r\n                        if (G.m_CrossRoad_v[site].m_CTrafficLight_Light.getStatus(it.m_nSiteRoadID, next)) {\r\n                            cout \u003C\u003C GREEN \u003C\u003C \"绿灯通行:\" \u003C\u003C endl;\r\n                            it.queRoute = route;\r\n                            it.dDistance = 0;\r\n                            it.m_nSiteRoadID = next;\r\n                            auto *site_road = &G.m_Road_v[next].m_queVehicle;\r\n                            site_road-\u003Epush_back(it);\r\n                            \u002F\u002F如果不能通行\r\n                        } else {\r\n                            \u002F\u002F将距离置为道路长度，表示正在等候红灯\r\n                            it.dDistance = G.m_Road_v[it.m_nSiteRoadID].m_dLength;\r\n                            cout \u003C\u003C YELLOW \u003C\u003C \"等待红灯\" \u003C\u003C endl;\r\n                            \u002F\u002F车辆塞回去\r\n                            obj.push_back(it);\r\n                        }\r\n                    }\r\n                    \u002F\u002F否则，当车十秒后还在此路时\r\n                } else {\r\n                    it.dDistance = dist;\r\n                    obj.push_back(it);\r\n                }\r\n                \u002F\u002F否则直接填入\r\n            } else {\r\n                obj.push_back(it);\r\n            }\r\n        }\r\n        road.m_queVehicle = obj;\r\n    }\r\n```\r\n\r\n",order:a,authorId:1,type:"post",status:"publish",commentsNum:a,allowComment:b,allowPing:b,allowFeed:b,parent:a,views:755,likes:a}}],fetch:{},mutations:void 0}}(0,"1")));