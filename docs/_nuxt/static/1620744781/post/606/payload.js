__NUXT_JSONP__("/post/606", (function(a,b){return {data:[{article:{cid:606,title:"scss\u002Fsass实现列表顺序加载动画",slug:"606",created:1575435540,modified:1592912944,text:"\u003C!--markdown--\u003E## 效果展示\r\n\r\n![列表顺序加载动画][1]\r\n\r\n本文会讲述如何使用scss\u002Fsass在微信小程序中实现列表顺序加载的动画。\r\n\r\n## 所用的css特性\r\n\r\n### CSS animations\r\n\r\n\u003E CSS animations 使得可以将从一个CSS样式配置转换到另一个CSS样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。\r\n\r\n相较于传统的脚本实现动画技术，使用CSS动画有三个主要优点：\r\n\r\n1. 能够非常容易地创建简单动画，你甚至不需要了解JavaScript就能创建动画。\r\n2. 动画运行效果良好，甚至在低性能的系统上。渲染引擎会使用跳帧或者其他技术以保证动画表现尽可能的流畅。而使用JavaScript实现的动画通常表现不佳（除非经过很好的设计）。\r\n3. 让浏览器控制动画序列，允许浏览器优化性能和效果，如降低位于隐藏选项卡中的动画更新频率。\r\n\r\n`css animations`的属性和子属性见[https:\u002F\u002Fdeveloper.mozilla.org\u002Fzh-CN\u002Fdocs\u002FWeb\u002FCSS\u002FCSS_Animations\u002FUsing_CSS_animations#%E9%85%8D%E7%BD%AE%E5%8A%A8%E7%94%BB](https:\u002F\u002Fdeveloper.mozilla.org\u002Fzh-CN\u002Fdocs\u002FWeb\u002FCSS\u002FCSS_Animations\u002FUsing_CSS_animations#%E9%85%8D%E7%BD%AE%E5%8A%A8%E7%94%BB)\r\n\r\n可主要分为两大部分，动画的实现形式和动画的属性规则。\r\n\r\n以下仅列出本文所用的属性。\r\n\r\n### animation-timing-function\r\nanimation-timing-function 规定动画的速度曲线。\r\n\r\n![速度曲线][2]\r\n\r\n### animation-delay\r\n顾名思义，设置动画的持续时间，单位秒\r\n\r\n### animation-fill-mode\r\n\u003E animation-fill-mode 属性规定动画在播放之前或之后，其动画效果是否可见。\r\n\r\n![animation-fill-mode][3]\r\n\r\n### 使用keyframes定义动画序列\r\n\r\nkeyframes就是一个描述关键帧的属性，通过使用@keyframes建立两个或两个以上关键帧来实现。每一个关键帧都描述了动画元素在给定的时间点上应该如何渲染。\r\n\u003E 因为动画的时间设置是通过CSS样式定义的，关键帧使用percentage来指定动画发生的时间点。0%表示动画的第一时刻，100%表示动画的最终时刻。因为这两个时间点十分重要，所以还有特殊的别名：from和to。这两个都是可选的，若from\u002F0%或to\u002F100%未指定，则浏览器使用计算值开始或结束动画。\r\n\r\n### 示例\r\n\r\n```css\r\n@keyframes list {\r\n\t\t0% {\r\n\t\t\ttransform: scale(0);\r\n\t\t}\r\n\r\n\t\t100% {\r\n\t\t\ttransform: scale(1);\r\n\t\t}\r\n\t}\r\n```\r\n如上代码所示，定义了一个@keyframe名字叫list，在动画开始时使用缩放0%，结束时缩放100%。那么它在整个动画的过程中，便会根据浏览器的性能展示一个从0%-100%渐变的动画。是不是根据有点意思？当然，你也可包含设置任何额外可选的关键帧，描述动画开始和结束之间的状态，比如45%。\r\n\r\n![animation.gif][4]\r\n\r\n至此我们已经实现了组件显示时逐渐放大的效果\r\n\r\n\r\n## 所用的scss特性\r\n\r\n以下为简介，详细内容请转至官方文档\r\n\r\n### 嵌套规则 (Nested Rules)\r\n\r\n\u003E scss\u002FSass允许将一个 CSS 样式嵌套进另一个样式中，内层样式仅适用于外层样式的选择器范围内。\r\n\r\n### 引用父选择器:&\r\n\r\n\u003E 你可以 & 字符来明确地表示插入指定父选择器。\r\n\r\n### 变量: $（Variables: $ ）\r\n\r\n以美元符开头，可当变量使用。\r\n\r\n### @mixin混入指令 (Mixin Directives)\r\n\r\n\u003E 混入(mixin)允许您定义可以在整个样式表中重复使用的样式，而避免了使用无语意的类（class），比如 .float-left。混入(mixin)还可以包含所有的CSS规则，以及任何其他在Sass文档中被允许使用的东西。\r\n他们甚至可以带arguments，引入变量，只需少量的混入(mixin)代码就能输出多样化的样式。\r\n\r\n### 插值：#{}（Interpolation: #{}）\r\n\r\n\u003E 你可以通过 #{} 插值语法在选择器和属性名中使用 SassScript 变量：\r\n\r\n### @for\r\n\r\n顾名思义，循环，要留意一下`to`和`through`的区别\r\n\r\n### 引用混合样式:@include （Including a Mixin: @include）\r\n\r\n## 实现方式\r\nwxml文件\r\n```xml\r\n\u003Cview class=\"list__item\"\u003E\r\n\u003Cview\u003E...\u003C\u002Fview\u003E\r\n\u003C\u002Fview\u003E\r\n```\r\n\r\n编译前的scss\u002Fsass\r\n```css\r\n\t.list {\r\n\t\t&__item {\r\n\t\t\tanimation: list 1s ease both;\r\n\t\t}\r\n\t}\r\n\r\n\t@keyframes list {\r\n\t\t0% {\r\n\t\t\ttransform: scale(0);\r\n\t\t}\r\n\r\n\t\t100% {\r\n\t\t\ttransform: scale(1);\r\n\t\t}\r\n\t}\r\n\r\n\t@mixin item($num) {\r\n\t\t$waitTime: ($num)*0.2;\r\n\t\tanimation-delay: #{$waitTime}s;\r\n\t}\r\n\r\n\t@for $i from 1 through 7 {\r\n\t\t.list__item:nth-child(#{$i}) {\r\n\t\t\t@include item($i);\r\n\t\t}\r\n\t}\r\n```\r\nless版\r\n```css\r\n\u002F\u002F list动画\r\n\t.list__item {\r\n\t\tanimation: list .8s ease both\r\n\t}\r\n\r\n\t@keyframes list {\r\n\t\t0% {\r\n\t\t\ttransform: scale(0);\r\n\t\t}\r\n\r\n\t\t100% {\r\n\t\t\ttransform: scale(1);\r\n\t\t}\r\n\t}\r\n\r\n\t.generate-columns(7);\r\n\r\n\t.generate-columns(@n, @i: 1) when (@i =\u003C @n) {\r\n\t\t.list__item:nth-child(@{i}) {\r\n\t\t\tanimation-delay: @i * 0.2;\r\n\t\t}\r\n\r\n\t\t.generate-columns(@n, (@i + 1));\r\n\t}\r\n\r\n```\r\n编译后的css\r\n```css\r\n.list__item {\r\n  -webkit-animation: list 1s ease both;\r\n          animation: list 1s ease both;\r\n}\r\n@-webkit-keyframes list {\r\n0% {\r\n    -webkit-transform: scale(0);\r\n            transform: scale(0);\r\n}\r\n100% {\r\n    -webkit-transform: scale(1);\r\n            transform: scale(1);\r\n}\r\n}\r\n@keyframes list {\r\n0% {\r\n    -webkit-transform: scale(0);\r\n            transform: scale(0);\r\n}\r\n100% {\r\n    -webkit-transform: scale(1);\r\n            transform: scale(1);\r\n}\r\n}\r\n.list__item:nth-child(1) {\r\n  -webkit-animation-delay: 0.2s;\r\n          animation-delay: 0.2s;\r\n}\r\n.list__item:nth-child(2) {\r\n  -webkit-animation-delay: 0.4s;\r\n          animation-delay: 0.4s;\r\n}\r\n.list__item:nth-child(3) {\r\n  -webkit-animation-delay: 0.6s;\r\n          animation-delay: 0.6s;\r\n}\r\n.list__item:nth-child(4) {\r\n  -webkit-animation-delay: 0.8s;\r\n          animation-delay: 0.8s;\r\n}\r\n.list__item:nth-child(5) {\r\n  -webkit-animation-delay: 1s;\r\n          animation-delay: 1s;\r\n}\r\n.list__item:nth-child(6) {\r\n  -webkit-animation-delay: 1.2s;\r\n          animation-delay: 1.2s;\r\n}\r\n.list__item:nth-child(7) {\r\n  -webkit-animation-delay: 1.4s;\r\n          animation-delay: 1.4s;\r\n}\r\n```\r\n![列表顺序加载动画效果展示](https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Flist.gif)\r\n\r\n## 参考资料\r\n\r\n[使用CSS动画](https:\u002F\u002Fdeveloper.mozilla.org\u002Fzh-CN\u002Fdocs\u002FWeb\u002FCSS\u002FCSS_Animations\u002FUsing_CSS_animations)\r\n[CSS3 animation-timing-function 属性](https:\u002F\u002Fwww.w3school.com.cn\u002Fcssref\u002Fpr_animation-timing-function.asp)\r\n[sass中文文档](https:\u002F\u002Fwww.sasscss.com\u002Fdocs\u002F)\r\n\r\n  [1]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Flist.gif\r\n  [2]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-04T03:58:02.png\r\n  [3]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2019-12-04T04:02:50.png\r\n  [4]: https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Fanimation.gif",order:a,authorId:1,type:"post",status:"publish",commentsNum:a,allowComment:b,allowPing:b,allowFeed:b,parent:a,views:686,likes:5}}],fetch:{},mutations:void 0}}(0,"1")));