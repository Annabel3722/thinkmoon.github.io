__NUXT_JSONP__("/post/895", (function(a,b){return {data:[{article:{cid:895,title:"TypeScript封装API，让代码编写柔润丝滑",slug:"895",created:1594974000,modified:1595294402,text:"\u003C!--markdown--\u003E![2020-07-17T08:19:34.png][1]\r\n\r\n## 引言\r\n\r\n干前端工作，大致离不开三大任务：切图，对接口，写页面逻辑。说到对接口，那肯定是离不开网络请求API的封装的。我将网络请求的封装模式大致分为三个派系：\r\n\r\n1. 无拘无束派 （只封装请求根地址，想咋请求就咋请求，最强的封装就是不封装）\r\n2. 拦截请求派 （使用一个拦截器配置请求行为和一些错误的拦截处理）\r\n3. 接口集成派（使用一个或多个文件，统一管理所有请求，约定不允许使用文件中未定义的接口）。\r\n\r\n我属于第三个派系，首先介绍一下各派的风格\r\n\r\n## 各派风格\r\n\r\n无拘无束派在快速成型方面略有优势，自由度也相对较高，但是维护起来并不容易，遇到接口改版的时候一部小心就会遗漏。\r\n\r\n![img](https:\u002F\u002Ftimgsa.baidu.com\u002Ftimg?image&quality=80&size=b9999_10000&sec=1594979834976&di=28e83b987d0093019b168e1b3cfe69e5&imgtype=0&src=http%3A%2F%2Fpic.yupoo.com%2Fniuguozhu_v%2FGpjU9ut9%2FTtozu.jpg)\r\n\r\n拦截请求派属于较优雅的一个派系，没有太多多余的内容，剩下的内容都是为解决问题而生。一般使用一个第三方请求库（如axios，flyio等）完成封装。大致像是这样\r\n\r\n```typescript\r\nimport { FlyError, FlyResponse } from \"flyio\";\r\nconst Fly = require(\"flyio\u002Fdist\u002Fnpm\u002Fwx\");\r\nlet fly = new Fly();\r\n\u002F\u002F 配置请求根地址\r\nfly.config.baseURL = process.env.VUE_APP_BASE_URL;\r\n\u002F\u002F 配置响应拦截器\r\nfly.interceptors.response.use(\r\n   \u002F\u002F 如果请求成功,即请求状态码2xx\r\n  (response: FlyResponse) =\u003E {\r\n    \u002F\u002F 并且操作成功\r\n    if (response.data.success) {\r\n       \u002F\u002F 返回响应数据体\r\n      return Promise.resolve(response.data);\r\n    } else {\r\n    \u002F\u002F 请求成功，但是操作失败，提示后端返回的msg，并抛出错误\r\n      uni.showToast({\r\n        icon: \"none\",\r\n        title: response.data.msg,\r\n      });\r\n      return Promise.reject(response.data);\r\n    }\r\n  },\r\n  \u002F\u002F 如果请求失败，即状态非2xx\r\n  (err: FlyError) =\u003E {\r\n    console.error(err);\r\n    \u002F\u002F 状态码为401，即跳转登录\r\n    if (err.status === 401) {\r\n      uni.reLaunch({\r\n        url: \"\u002Fpages\u002Flogin\",\r\n      });\r\n      return;\r\n    }\r\n    \u002F\u002F 其他错误状态码，就先弹个框吧\r\n    uni.showModal({\r\n      title: err!.request!.url + \"接口状态\" + err.status,\r\n      content: \"错误原因:\" + err.engine.response.msg,\r\n    });\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n```\r\n\r\n然后使用的时候就直接采用第三方的请求，如`fly.get()`,`fly.post`\r\n\r\n现在来介绍我所属的派系，我比上面更极端一点，除了封装请求拦截器暴露POST，GET外，还将所有的接口集中到一个API文件（太多了就按类型拆分，如user，shop，setting）\r\n\r\n## 我的实现\r\n\r\n基本请求文件http.ts，已引入上文提及的拦截器\r\n\r\n```typescript\r\nfunction GET(url: string, params = {}): Promise\u003CApiResponse\u003E {\r\n  let config = {\r\n    headers: {\r\n      Authorization: store.state.token,\r\n    }\r\n  };\r\n  return fly.get(url, params, config);\r\n}\r\nfunction POST(url: string, params = {}): Promise\u003CApiResponse\u003E {\r\n  let config = {\r\n    headers: {\r\n      Authorization: store.state.token,\r\n    }\r\n  };\r\n  return fly.post(url, params, config);\r\n}\r\nexport { GET, POST };\r\n```\r\n\r\napi.ts，负责集成Api\r\n\r\n```typescript\r\nimport { GET, POST } from \".\u002Fhttp\";\r\nexport default class Api {\r\n  \u002F**\r\n   * 登录接口\r\n   * @param params phone,password\r\n   *\u002F\r\n  login(params: object) {\r\n    return POST(\"\u002Fuser\u002Flogin\", params);\r\n  }\r\n  \u002F**\r\n   * 获取账户下所有店铺\r\n   *\u002F\r\n  getShop() {\r\n    return POST(\"\u002Fshop\u002FgetShopListByUserId\");\r\n  }\r\n  \u002F**\r\n   * 获取首页数据总览\r\n   * @param params {shopId}\r\n   *\u002F\r\n  getOverview(params: {}) {\r\n    return POST(\"\u002Fuser\u002Fhomepage\u002Fstatistics\", params);\r\n  }\r\n  \u002F**\r\n   * 根据店铺Id获取二级分类\r\n   * @param params {shopId}\r\n   *\u002F\r\n  getCommodityType(params: {}) {\r\n    return POST(\"\u002Fcnccommodity\u002Fcommodity_type\u002Fby_shop\", params);\r\n  }\r\n  \u002F**\r\n   * 分页获取商品列表\r\n   *\u002F\r\n  getCommodityList(params: {}) {\r\n    return POST(\"\u002Fcnccommodity\u002Fcommodity_by_page\", params);\r\n  }\r\n}\r\n```\r\n\r\n然后将Api文件，挂载到Vue的原型链。\r\n\r\n```javascript\r\nimport API from \".\u002Fplugins\u002Ffly\u002Fapi\";\r\nVue.prototype.$api = new API();\r\n```\r\n\r\n在组件中使用\r\n\r\n```javascript\r\n this.$api.login(this.loginForm).then((res) =\u003E {\r\n console.log(res)\r\n })\r\n```\r\n\r\n这样高度封装的好处是，任何一个接口要改内容，或者自定义功能，都可以只维护Api文件就行了。假设有一需求，要在获取商品之后提示用户”恭喜发财“，而这个接口又在多个页面中使用，我可以只做如下修改即可。\r\n\r\n```javascript\r\n \u002F**\r\n   * 分页获取商品列表\r\n   *\u002F\r\n  getCommodityList(params: {}) {\r\n    showToast(\"恭喜发财\")\r\n    return POST(\"\u002Fcnccommodity\u002Fcommodity_by_page\", params);\r\n  }\r\n```\r\n\r\n这是一个荒诞的需求，但是如果需求是部分请求超过1s就显示加载中呢？或者部分接口需要显示后端返回的msg呢？我可以这样做。\r\n\r\napi.ts\r\n\r\n```typescript\r\nupdatePw(params: object) {\r\n    return Post(\"\u002Fadminmanage\u002FupdatePassWard\", params, true);\r\n},\r\n```\r\n\r\nhttp.ts\r\n\r\n```typescript\r\nexport async function Post(api: string, params = {}, needToast = false) {\r\n  let data = await axios.post(api, params);\r\n  if (data.success && needToast) {\r\n    Message.success(data.msg);\r\n  }\r\n  return data;\r\n}\r\n```\r\n\r\n为了应对频繁更改的需求，我真是煞费苦心。\r\n\r\n## Typescript的加持\r\n\r\n上面一直在说接口封装的事情，好像对Typescript只字未提。虽然上面都使用了typescript但是都只是铺垫，真正让代码编写柔润丝滑的是声明文件。\r\n\r\n### 原型Api的声明\r\n\r\n上面我们已经将api挂载到vue的原型，但是typescript的作用并未完全发挥。typescript有两个强大的作用，1. 减少代码出错率 2. 提高代码书写效率。要启用ts强大的语法提示功能，我们需要先写一个d.t文件。\r\n\r\nvue-property.d.ts\r\n\r\n```typescript\r\nimport Vue from \"vue\";\r\nimport Api from \".\u002Fplugins\u002Ffly\u002Fapi\";\r\ndeclare module \"vue\u002Ftypes\u002Fvue\" {\r\n  interface Vue {\r\n    $api: Api;\r\n  }\r\n}\r\n```\r\n\r\n该文件的作用就是将Vue原型链上的$api类型设置为Api Class, 接下来我们来一起看看它的效果。\r\n\r\n![typescript推导api](http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Ftypescript推导api.gif)\r\n\r\nVs code贴心的语法提示，从注释提示到参数。无与伦比的代码护航能力几乎能让你无脑写请求。\r\n\r\n### 响应结构体的声明\r\n\r\n人不能满足现状，光有请求推导可还不够。我们还要让它推导响应结构体。假设项目后端返回的响应结构如下\r\n\r\n```json\r\n{\r\n    \"code\": 200,\r\n    \"success\": true,\r\n    \"msg\": \"操作成功\",\r\n    \"result\": {\r\n    }\r\n}\r\n```\r\n\r\n我们再创建一个响应的d.ts文件\r\n\r\nindex.d.ts\r\n\r\n```typescript\r\ninterface ApiResponse {\r\n  \u002F**\r\n   * code: 响应状态码\r\n   *\u002F\r\n  code: number;\r\n  \u002F**\r\n   * success: 操作是否成功标准\r\n   *\u002F\r\n  success: boolean;\r\n  \u002F**\r\n   * msg： 请求的附带信息\r\n   *\u002F\r\n  msg: string;\r\n  \u002F**\r\n   * result: 请求返回结果\r\n   *\u002F\r\n  result: Object | any;\r\n}\r\n```\r\n\r\n同时声明接口请求返回为ApiResponse\r\n\r\n```typescript\r\nfunction GET(url: string, params = {}): Promise\u003CApiResponse\u003E {\r\n  let config = {\r\n    headers: {\r\n      Authorization: store.state.token,\r\n    }\r\n  };\r\n  return fly.get(url, params, config);\r\n}\r\nfunction POST(url: string, params = {}): Promise\u003CApiResponse\u003E {\r\n  let config = {\r\n    headers: {\r\n      Authorization: store.state.token,\r\n    }\r\n  };\r\n  return fly.post(url, params, config);\r\n}\r\nexport { GET, POST };\r\n\r\n```\r\n\r\n看看语法提示效果\r\n\r\n![ts推导响应体](http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002Fts推导响应体.gif)\r\n\r\n同时如果有分页，还可以声明分页的结构体。总之，声明文件写得好，效率提高绝对少不了。\r\n\r\n## 后记\r\n\r\nts给我一种以前写C++的感觉，需要先写声明文件`.h`然后在写`.cpp`，这样做的好处是约束你的代码，让你的代码更规范。不过，缺点就是声明文件有种给自己找事的感觉，不过我依旧强烈建议在前端项目下使用ts。这在后期的维护是绝对有利的，而且也并非所有文件都需要写声明文件，要不要写声明文件，取决于你的实现方式。比如本文中的Api文件就没写声明文件，照样可以类型推导，语法提示。祝我早日实现无脑编码~\r\n\r\n\r\n  [1]: http:\u002F\u002Fblog.cdn.thinkmoon.cn\u002Fblog\u002Ftypecho\u002F2020-07-17T08:19:34.png",order:b,authorId:1,type:"post",status:"publish",commentsNum:8,allowComment:a,allowPing:a,allowFeed:a,parent:b,views:1646,likes:12}}],fetch:{},mutations:void 0}}("1",0)));