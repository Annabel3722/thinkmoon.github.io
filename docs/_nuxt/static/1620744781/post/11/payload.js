__NUXT_JSONP__("/post/11", (function(a,b,c){return {data:[{article:{cid:11,title:"python3 + Django + uwsgi + nginx 配置部署笔记",slug:"11",created:1542335880,modified:1547608436,text:"\u003C!--markdown--\u003E\u003E 本文环境\r\n\r\n操作系统: Ubuntu 16.04.3\r\nPython版本: 3.5.2\r\nDjango版本: 2.0.4\r\nnginx版本: 1.10.3\r\n\r\n\u003E本文平台为腾讯云1核1G系统 \r\n\u003E 我的项目文件名为: `dgutpsy`\r\n\r\n## 安装pip3(python3 的pip)\r\n```shell\r\nsudo apt-get install python3-pip\r\n```\r\n![2018-04-10-20-07-25.png][1]\r\n\r\n\u003E 安装成功后运行`pip3`将会出现\r\n\r\n![2018-04-10-20-09-19.png][2]\r\n\r\n## 安装uwsgi\r\n```shell\r\npip install uwsgi\r\n```\r\n![2018-04-10-20-17-19.png][3]\r\n\r\n## 测试uwsgi运行状态\r\n\u003E 新建文件test.py\r\n```python\r\ndef application(env, start_response):\r\n    start_response('200 OK', [('Content-Type','text\u002Fhtml')])\r\n    return [b\"Hello World\"]\r\n```\r\n\u003E 有些教程说是 `return \"hello world\"`\r\n\u003E 但是这样其实会出现访问空白的情况, 我的是Python3的环境，需要对hello world进行编码.\r\n而如果你是Python2的环境，你应该写`return \"hello world\"`\r\n\r\n\r\n### 使用uwsgi运行该文件\r\n```shell\r\nuwsgi --http :8000 --wsgi-file test.py\r\n```\r\n\u003E 此语句的意思是，`使用uwsgi运行test.py文件， 采用http模式， 端口8000`\r\n\r\n![2018-04-10-20-44-49.png][4]\r\n\r\n### 访问页面\r\n\r\n\u003E 好啦,可以看到亲切的hello world 就说明uwsgi运行成功了\r\n\r\n![2018-04-10-20-39-21.png][5]\r\n\r\n\u003E TIPS: 如果你访问不了,请先检查腾讯云安全组端口是否开放8000端口\r\n## 安装Django\r\n```shell\r\npip3 install Django\r\n```\r\n\u003E 如在python3里面import django没有报错则安装成功.\r\n\r\n![2018-04-10-20-55-49.png][6]\r\n\r\n## 上传项目代码\r\n\u003E 现在我们开始上传项目代码\r\n\r\n![2018-04-10-20-42-25.png][7]\r\n\r\n\u003E 使用MobaXterm的sftp工具拖进来,[笑着哭]不要问我为什么不用ftp,这个方便.\r\n## 确认代码运行正常\r\n\u003E 切进项目目录,运行\r\n```shell\r\npython3 manage.py runserver 0.0.0.0:8000\r\n```\r\n![2018-04-10-20-59-03.png][8]\r\n### 访问页面\r\n![2018-04-10-21-01-32.png][9]\r\n\u003E 不太对?这是因为设置了ALLOWED_HOSTS的原因\r\n\u003E 我们在setting.py里设置一下\r\n```python\r\nALLOWED_HOSTS = ['*']\r\n```\r\n### 再次访问页面\r\n![2018-04-10-21-05-34.png][10]\r\n\u003E OK!\r\n\r\n## uswgi运行项目\r\n```shell\r\n uwsgi --http :8000 --chdir \u002Fhome\u002Fubuntu\u002Fdgutpsy  --wsgi dgutpsy.wsgi\r\n```\r\n\u003E 这个语句的意思与上相似，只不过是多了一个工作路径和wsgi文件\r\n![2018-04-10-21-05-34.png][11]\r\n\u003E 开什么玩笑? 你觉得没变化?\r\n\r\n***\r\n## *至此*\r\n\u003E 我们可以暂定以下内容\r\n1. 项目没问题. \r\n2. 项目配置没问题\r\n3. uwsgi没问题\r\n4. 对项目的支持环境没问题\r\n***\r\n\r\n\u003E 接下来, 我们开始配置nginx\r\n\r\n## 安装nginx\r\n```shell\r\nsudo apt-get install nginx\r\n```\r\n\r\n## 测试nginx运行状态\r\n![2018-04-10-21-18-53.png][12]\r\n\u003E nginx 安装成功\r\n\r\n## 修改nginx配置\r\n\u003E 文件路径`\"\u002Fetc\u002Fnginx\u002Fsites-enabled\u002Fdefault\"`\r\n\r\n别再费力找nginx.conf啦,新版本已经没有这个文件的.\r\n\u003E 我的\r\n```conf\r\nupstream django {\r\n        server 127.0.0.1:8001; #web的socket端口\r\n    }\r\nserver {\r\n\tlisten 80 default_server;\r\n\tlisten [::]:80 default_server;\r\n \r\n\tindex index.html index.htm index.nginx-debian.html;\r\n\r\n\tserver_name _;\r\n\r\n\tlocation \u002F {\r\n\t\troot \u002Fhome\u002Fubuntu\u002Fdgutpsy; #项目目录\r\n        uwsgi_pass django;\r\n        include \u002Fhome\u002Fubuntu\u002Fdgutpsy\u002Fuwsgi_params; #uwsgi_params文件的地址\r\n\t}\r\n}\r\n```\r\n完整的uwsgi_params文件内容应该是\r\n```python\r\nuwsgi_param  QUERY_STRING       $query_string;\r\nuwsgi_param  REQUEST_METHOD     $request_method;\r\nuwsgi_param  CONTENT_TYPE       $content_type;\r\nuwsgi_param  CONTENT_LENGTH     $content_length;\r\n\r\nuwsgi_param  REQUEST_URI        $request_uri;\r\nuwsgi_param  PATH_INFO          $document_uri;\r\nuwsgi_param  DOCUMENT_ROOT      $document_root;\r\nuwsgi_param  SERVER_PROTOCOL    $server_protocol;\r\nuwsgi_param  REQUEST_SCHEME     $scheme;\r\nuwsgi_param  HTTPS              $https if_not_empty;\r\n\r\nuwsgi_param  REMOTE_ADDR        $remote_addr;\r\nuwsgi_param  REMOTE_PORT        $remote_port;\r\nuwsgi_param  SERVER_PORT        $server_port;\r\nuwsgi_param  SERVER_NAME        $server_name;\r\n```\r\n\u003E 没有这个文件,或者这个文件写错是会报错的哦.\r\n## 访问测试502\r\n![2018-04-10-21-37-49.png][13]\r\n\u003E 这是因为我们的socket通信还没开始呢!\r\n## nginx 与 uwsgi通信\r\n\u003E 先使用hello world测试\r\n```shell\r\nuwsgi --socket :8001 --wsgi-file test.py\r\n```\r\n### 访问测试页面\r\n![图片描述][14]\r\n*** \r\n至此: nginx 与 uwsgi通信成功!\r\n\u003E TIPS: 这里你是无法通过在浏览器里面访问8001端口来判断是否启动的，因为它是socket协议\r\n***\r\n## 让uwsgi后台运行\r\n\u003E 这样虽然看似可以, 但是当你关闭ssh时,又会出现502了!\r\n\u003E\r\n\u003E 这是因为当你关闭这个ssh进程时,uwsgi进程也被终止了.\r\n而且,每次启动都要输一串好长的命令,好不麻烦!\r\n\r\n这个时候,我们需要用到一个东西, 那就是ini配置文件启动.\r\n其中`daemonize = \u002Fhome\u002Fubuntu\u002Fdgutpsy\u002Ftest.log`的意思就是后台运行并规定日志输出目录。\r\n### 新建test.ini\r\n```ini\r\n[uwsgi]\r\nsocket = 127.0.0.1:8001\r\nwsgi-file = \u002Fhome\u002Fubuntu\u002Fdgutpsy\u002Ftest.py\r\ndaemonize = \u002Fhome\u002Fubuntu\u002Fdgutpsy\u002Ftest.log \r\n```\r\n```shell\r\nuwsgi --ini test.ini\r\n```\r\n## niginx与Django项目通信\r\n### 新建dgutpsy.ini\r\n```\r\n[uwsgi]\r\nsocket = 127.0.0.1:8001\r\nchdir           = \u002Fhome\u002Fubuntu\u002Fdgutpsy\r\nmodule          = dgutpsy.wsgi\r\nmaster          = true\r\nprocesses       = 1 \r\n\r\nthreads = 2 \r\nmax-requests = 6000\r\n\r\ndaemonize = \u002Fhome\u002Fubuntu\u002Fdgutpsy\u002Frun.log\r\n\r\n```\r\n然后运行\r\n```shell\r\nuwsgi --ini dgutpsy.ini\r\n```\r\n## 域名映射\r\n\r\n添加域名\u003E解析`consult.psyannabel.cn`\r\n### 访问页面\r\n![](https:\u002F\u002Fblog.cdn.thinkmoon.cn\u002F2018-04-10-22-17-32.png)\r\n\r\n## 后记:\r\n\r\n\u003E Q&A:\r\n\u003E Q: 能用manage.py运行的,为什么要用uwsgi?\r\n\u003E \u003E A: 单进程的manage.py, 能和web服务器uwsgi比ma\r\n\u003E\r\n\u003E Q: 能用uwsgi的,为什么还要用nginx?\r\n\u003E \u003E A: uwsgi虽然是web服务器, 但是它在处理静态文件时, 并没有nginx来得优秀.\r\n\u003E\r\n\u003E Q: 大致流程?\r\n\u003E \u003E A: nginx运行web处理http请求, nginx使用socket与uwsgi通信,将动态部分转让交给uwsgi处理\r\n\u003E \r\n\u003E Q: 为啥我的test.py运行不了？\r\n\u003E \u003E A: 如果端口开放没有问题，那么请检查Python版本对应的return\r\n\r\n\r\n  [1]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdQ\r\n  [2]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdO\r\n  [3]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdN\r\n  [4]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdP\r\n  [5]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdL\r\n  [6]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdH\r\n  [7]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdG\r\n  [8]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdF\r\n  [9]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdE\r\n  [10]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdK\r\n  [11]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdK\r\n  [12]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdD\r\n  [13]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbV8qdC\r\n  [14]: https:\u002F\u002Fsegmentfault.com\u002Fimg\u002FbVbi2Qy",order:a,authorId:c,type:"post",status:"publish",commentsNum:a,allowComment:b,allowPing:b,allowFeed:b,parent:a,views:2566,likes:c}}],fetch:{},mutations:void 0}}(0,"1",1)));